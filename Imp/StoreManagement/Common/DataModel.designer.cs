#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SystemGroup.Training.StoreManagement.Common
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GeneralDvp")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInventoryVoucher(InventoryVoucher instance);
    partial void UpdateInventoryVoucher(InventoryVoucher instance);
    partial void DeleteInventoryVoucher(InventoryVoucher instance);
    partial void InsertInventoryVoucherItem(InventoryVoucherItem instance);
    partial void UpdateInventoryVoucherItem(InventoryVoucherItem instance);
    partial void DeleteInventoryVoucherItem(InventoryVoucherItem instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    partial void InsertPartStore(PartStore instance);
    partial void UpdatePartStore(PartStore instance);
    partial void DeletePartStore(PartStore instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertStoreKeeper(StoreKeeper instance);
    partial void UpdateStoreKeeper(StoreKeeper instance);
    partial void DeleteStoreKeeper(StoreKeeper instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::SystemGroup.Training.StoreManagement.Common.Properties.Settings.Default.GeneralDvpConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<InventoryVoucher> InventoryVouchers
		{
			get
			{
				return this.GetTable<InventoryVoucher>();
			}
		}
		
		public System.Data.Linq.Table<InventoryVoucherItem> InventoryVoucherItems
		{
			get
			{
				return this.GetTable<InventoryVoucherItem>();
			}
		}
		
		public System.Data.Linq.Table<Part> Parts
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
		
		public System.Data.Linq.Table<PartStore> PartStores
		{
			get
			{
				return this.GetTable<PartStore>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<StoreKeeper> StoreKeepers
		{
			get
			{
				return this.GetTable<StoreKeeper>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.InventoryVoucher")]
	public partial class InventoryVoucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private long _StoreRef;
		
		private long _PartyRef;
		
		private int _Type;
		
		private int _State;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<InventoryVoucherItem> _InventoryVoucherItem;
		
		private EntityRef<Store> _Store;
		
		private EntityRef<StoreKeeper> _StoreKeeper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStoreRefChanging(long value);
    partial void OnStoreRefChanged();
    partial void OnStoreKeeperRefChanging(long value);
    partial void OnStoreKeeperRefChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public InventoryVoucher()
		{
			this._InventoryVoucherItem = default(EntityRef<InventoryVoucherItem>);
			this._Store = default(EntityRef<Store>);
			this._StoreKeeper = default(EntityRef<StoreKeeper>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="InventoryVoucherID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long StoreRef
		{
			get
			{
				return this._StoreRef;
			}
			set
			{
				if ((this._StoreRef != value))
				{
					this.OnStoreRefChanging(value);
					this.SendPropertyChanging();
					this._StoreRef = value;
					this.SendPropertyChanged("StoreRef");
					this.OnStoreRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StoreKeeper", Storage="_PartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long StoreKeeperRef
		{
			get
			{
				return this._PartyRef;
			}
			set
			{
				if ((this._PartyRef != value))
				{
					this.OnStoreKeeperRefChanging(value);
					this.SendPropertyChanging();
					this._PartyRef = value;
					this.SendPropertyChanged("StoreKeeperRef");
					this.OnStoreKeeperRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryVoucher_InventoryVoucherItem", Storage="_InventoryVoucherItem", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public InventoryVoucherItem InventoryVoucherItem
		{
			get
			{
				return this._InventoryVoucherItem.Entity;
			}
			set
			{
				InventoryVoucherItem previousValue = this._InventoryVoucherItem.Entity;
				if (((previousValue != value) 
							|| (this._InventoryVoucherItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryVoucherItem.Entity = null;
						previousValue.InventoryVoucher = null;
					}
					this._InventoryVoucherItem.Entity = value;
					if ((value != null))
					{
						value.InventoryVoucher = this;
					}
					this.SendPropertyChanged("InventoryVoucherItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_InventoryVoucher", Storage="_Store", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.InventoryVoucher = null;
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.InventoryVoucher = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreKeeper_InventoryVoucher", Storage="_StoreKeeper", ThisKey="StoreKeeperRef", OtherKey="ID", IsForeignKey=true)]
		public StoreKeeper StoreKeeper
		{
			get
			{
				return this._StoreKeeper.Entity;
			}
			set
			{
				StoreKeeper previousValue = this._StoreKeeper.Entity;
				if (((previousValue != value) 
							|| (this._StoreKeeper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreKeeper.Entity = null;
						previousValue.InventoryVouchers.Remove(this);
					}
					this._StoreKeeper.Entity = value;
					if ((value != null))
					{
						value.InventoryVouchers.Add(this);
						this._PartyRef = value.ID;
					}
					else
					{
						this._PartyRef = default(long);
					}
					this.SendPropertyChanged("StoreKeeper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.InventoryVoucherItem")]
	public partial class InventoryVoucherItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _InventoryVoucherRef;
		
		private long _PartRef;
		
		private decimal _Quantity;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<InventoryVoucher> _InventoryVoucher;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnInventoryVoucherRefChanging(long value);
    partial void OnInventoryVoucherRefChanged();
    partial void OnPartRefChanging(long value);
    partial void OnPartRefChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public InventoryVoucherItem()
		{
			this._InventoryVoucher = default(EntityRef<InventoryVoucher>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="InventoryVoucherItemID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryVoucherRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long InventoryVoucherRef
		{
			get
			{
				return this._InventoryVoucherRef;
			}
			set
			{
				if ((this._InventoryVoucherRef != value))
				{
					this.OnInventoryVoucherRefChanging(value);
					this.SendPropertyChanging();
					this._InventoryVoucherRef = value;
					this.SendPropertyChanged("InventoryVoucherRef");
					this.OnInventoryVoucherRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartRef
		{
			get
			{
				return this._PartRef;
			}
			set
			{
				if ((this._PartRef != value))
				{
					this.OnPartRefChanging(value);
					this.SendPropertyChanging();
					this._PartRef = value;
					this.SendPropertyChanged("PartRef");
					this.OnPartRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(28,6) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryVoucher_InventoryVoucherItem", Storage="_InventoryVoucher", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public InventoryVoucher InventoryVoucher
		{
			get
			{
				return this._InventoryVoucher.Entity;
			}
			set
			{
				InventoryVoucher previousValue = this._InventoryVoucher.Entity;
				if (((previousValue != value) 
							|| (this._InventoryVoucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryVoucher.Entity = null;
						previousValue.InventoryVoucherItem = null;
					}
					this._InventoryVoucher.Entity = value;
					if ((value != null))
					{
						value.InventoryVoucherItem = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("InventoryVoucher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_InventoryVoucherItem", Storage="_Part", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.InventoryVoucherItem = null;
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.InventoryVoucherItem = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.Part")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Title;
		
		private long _UnitRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<InventoryVoucherItem> _InventoryVoucherItem;
		
		private EntityRef<PartStore> _PartStore;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitRefChanging(long value);
    partial void OnUnitRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Part()
		{
			this._InventoryVoucherItem = default(EntityRef<InventoryVoucherItem>);
			this._PartStore = default(EntityRef<PartStore>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PartID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long UnitRef
		{
			get
			{
				return this._UnitRef;
			}
			set
			{
				if ((this._UnitRef != value))
				{
					this.OnUnitRefChanging(value);
					this.SendPropertyChanging();
					this._UnitRef = value;
					this.SendPropertyChanged("UnitRef");
					this.OnUnitRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_InventoryVoucherItem", Storage="_InventoryVoucherItem", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public InventoryVoucherItem InventoryVoucherItem
		{
			get
			{
				return this._InventoryVoucherItem.Entity;
			}
			set
			{
				InventoryVoucherItem previousValue = this._InventoryVoucherItem.Entity;
				if (((previousValue != value) 
							|| (this._InventoryVoucherItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryVoucherItem.Entity = null;
						previousValue.Part = null;
					}
					this._InventoryVoucherItem.Entity = value;
					if ((value != null))
					{
						value.Part = this;
					}
					this.SendPropertyChanged("InventoryVoucherItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartStore", Storage="_PartStore", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PartStore PartStore
		{
			get
			{
				return this._PartStore.Entity;
			}
			set
			{
				PartStore previousValue = this._PartStore.Entity;
				if (((previousValue != value) 
							|| (this._PartStore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartStore.Entity = null;
						previousValue.Part = null;
					}
					this._PartStore.Entity = value;
					if ((value != null))
					{
						value.Part = this;
					}
					this.SendPropertyChanged("PartStore");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Part", Storage="_Unit", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Part = null;
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Part = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.PartStore")]
	public partial class PartStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _PartRef;
		
		private long _StoreRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPartRefChanging(long value);
    partial void OnPartRefChanged();
    partial void OnStoreRefChanging(long value);
    partial void OnStoreRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public PartStore()
		{
			this._Part = default(EntityRef<Part>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PartStoreID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartRef
		{
			get
			{
				return this._PartRef;
			}
			set
			{
				if ((this._PartRef != value))
				{
					this.OnPartRefChanging(value);
					this.SendPropertyChanging();
					this._PartRef = value;
					this.SendPropertyChanged("PartRef");
					this.OnPartRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long StoreRef
		{
			get
			{
				return this._StoreRef;
			}
			set
			{
				if ((this._StoreRef != value))
				{
					this.OnStoreRefChanging(value);
					this.SendPropertyChanging();
					this._StoreRef = value;
					this.SendPropertyChanged("StoreRef");
					this.OnStoreRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartStore", Storage="_Part", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartStore = null;
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartStore = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_PartStore", Storage="_Store", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.PartStore = null;
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.PartStore = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(long);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<InventoryVoucher> _InventoryVoucher;
		
		private EntityRef<PartStore> _PartStore;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Store()
		{
			this._InventoryVoucher = default(EntityRef<InventoryVoucher>);
			this._PartStore = default(EntityRef<PartStore>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StoreID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_InventoryVoucher", Storage="_InventoryVoucher", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public InventoryVoucher InventoryVoucher
		{
			get
			{
				return this._InventoryVoucher.Entity;
			}
			set
			{
				InventoryVoucher previousValue = this._InventoryVoucher.Entity;
				if (((previousValue != value) 
							|| (this._InventoryVoucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryVoucher.Entity = null;
						previousValue.Store = null;
					}
					this._InventoryVoucher.Entity = value;
					if ((value != null))
					{
						value.Store = this;
					}
					this.SendPropertyChanged("InventoryVoucher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_PartStore", Storage="_PartStore", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PartStore PartStore
		{
			get
			{
				return this._PartStore.Entity;
			}
			set
			{
				PartStore previousValue = this._PartStore.Entity;
				if (((previousValue != value) 
							|| (this._PartStore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartStore.Entity = null;
						previousValue.Store = null;
					}
					this._PartStore.Entity = value;
					if ((value != null))
					{
						value.Store = this;
					}
					this.SendPropertyChanged("PartStore");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.StoreKeeper")]
	public partial class StoreKeeper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _PartyRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<InventoryVoucher> _InventoryVouchers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPartyRefChanging(long value);
    partial void OnPartyRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public StoreKeeper()
		{
			this._InventoryVouchers = new EntitySet<InventoryVoucher>(new Action<InventoryVoucher>(this.attach_InventoryVouchers), new Action<InventoryVoucher>(this.detach_InventoryVouchers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StoreKeeperID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartyRef
		{
			get
			{
				return this._PartyRef;
			}
			set
			{
				if ((this._PartyRef != value))
				{
					this.OnPartyRefChanging(value);
					this.SendPropertyChanging();
					this._PartyRef = value;
					this.SendPropertyChanged("PartyRef");
					this.OnPartyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreKeeper_InventoryVoucher", Storage="_InventoryVouchers", ThisKey="ID", OtherKey="StoreKeeperRef")]
		public EntitySet<InventoryVoucher> InventoryVouchers
		{
			get
			{
				return this._InventoryVouchers;
			}
			set
			{
				this._InventoryVouchers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryVouchers(InventoryVoucher entity)
		{
			this.SendPropertyChanging();
			entity.StoreKeeper = this;
		}
		
		private void detach_InventoryVouchers(InventoryVoucher entity)
		{
			this.SendPropertyChanging();
			entity.StoreKeeper = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="TRN3.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Unit()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UnitID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Part", Storage="_Part", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Unit = null;
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Unit = this;
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
